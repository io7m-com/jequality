<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright © 2014 <code@io7m.com> http://io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<s:document
  xmlns:s="http://schemas.io7m.com/structural/2.0.0"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <s:document-title>${project.parent.name} ${project.version} Documentation</s:document-title>
  <s:document-style>documentation.css</s:document-style>
  <s:document-contents/>

  <s:part>
    <s:part-title>Package Information</s:part-title>
    <s:part-contents />
    <s:section>
      <s:section-title>Orientation</s:section-title>
      <s:subsection>
        <s:subsection-title>Overview</s:subsection-title>
        <s:paragraph>
          The <s:term s:type="package">${project.parent.name}</s:term> package 
          implements a set of functions and types for dealing with equality in Java.
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>Installation</s:section-title>
      <s:subsection>
        <s:subsection-title>Source compilation</s:subsection-title>
        <s:paragraph>
          The project can be compiled and installed with
          <s:link-external s:target="http://maven.apache.org">Maven</s:link-external>:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim s:type="example"><![CDATA[$ mvn -C clean install]]></s:verbatim>
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Maven</s:subsection-title>
        <s:paragraph>
          Regular releases are made to the
          <s:link-external s:target="http://search.maven.org/#search%7Cga%7C1%7C${project.parent.name}">Central Repository</s:link-external>,
          so it's possible to use the <s:term s:type="package">${project.parent.name}</s:term>
          package in your projects with the following Maven dependency:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim s:type="example"><![CDATA[<dependency>
  <groupId>${project.groupId}</groupId>
  <artifactId>${project.parent.artifactId}-core</artifactId>
  <version>${project.version}</version>
</dependency>]]></s:verbatim>
        </s:paragraph>
        <s:paragraph>
          All <s:link-external s:target="http://io7m.com">io7m.com</s:link-external>
          packages use Semantic Versioning
          <s:footnote>
            <s:link-external s:target="http://semver.org">http://semver.org</s:link-external>
          </s:footnote>, which implies that it is always safe to use version ranges
          with an exclusive upper bound equal to the next major version - the API of
          the package will not change in a backwards-incompatible manner before the
          next major version.
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>Platform Specific Issues</s:section-title>
      <s:paragraph>
        There are currently no known platform-specific issues.
      </s:paragraph>
    </s:section>

    <s:section>
      <s:section-title>License</s:section-title>
      <s:paragraph>
        All files distributed with the <s:term s:type="package">${project.parent.name}</s:term>
        package are placed under the following license:
        <s:verbatim s:type="license"><![CDATA[Copyright © 2014 <code@io7m.com> http://io7m.com

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.]]>
        </s:verbatim>
      </s:paragraph>
    </s:section>
  </s:part>

  <s:part>
    <s:part-title>Usage</s:part-title>
    <s:part-contents/>
    <s:section>
      <s:section-title>Annotations</s:section-title>
      <s:subsection>
        <s:subsection-title>Overview</s:subsection-title>
        <s:paragraph>
          In Java, if a class does not override the 
          <s:link-external s:target="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#equals(java.lang.Object)">equals</s:link-external>
          method provided by the standard 
          <s:link-external s:target="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">java.lang.Object</s:link-external>
          type, then the class effectively has <s:term s:type="term">reference equality</s:term>.
          That is, the <s:term s:type="function">equals</s:term> method simply compares
          the addresses of the operands. In some cases this is desirable; in most
          cases it is not. It is very easy to forget to override an
          <s:term s:type="function">equals</s:term> method, leading to extremely
          subtle and dangerous bugs.
        </s:paragraph>
        <s:paragraph>
          The <s:term s:type="package">${project.parent.name}</s:term> package
          provides a set of annotations and a validator to check that classes
          conform to their annotations. Essentially, the programmer annotates a
          class with an annotation that states that the class is expected to
          implement either <s:term s:type="term">structural</s:term> or
          <s:term s:type="term">reference</s:term> equality. A class is assumed
          to implement <s:term s:type="term">structural</s:term> equality iff
          it overrides <s:term s:type="function">equals</s:term>. The provided
          validator checks that classes are annotated, and that they implement
          the type of equality that their annotations claim. As an extra safety
          check, the validator checks that if <s:term s:type="function">equals</s:term>
          is overridden, then <s:term s:type="function">hashCode</s:term> is
          also overridden in the same class. The validator is not capable of checking that an
          overridden <s:term s:type="function">equals</s:term> actually does
          implement <s:term s:type="term">structural</s:term> equality (and does not,
          for example, simply delegate to <s:term s:type="type">java.lang.Object</s:term>).
          Solving this problem is undecidable in general.
        </s:paragraph>
      </s:subsection>
      <s:subsection>
        <s:subsection-title>Validation</s:subsection-title>
        <s:paragraph>
          Validation of classes is expected to occur in the test suite of
          the project using the <s:term s:type="package">${project.parent.name}</s:term> package.
        </s:paragraph>
        <s:paragraph>
          As an example:
        </s:paragraph>
        <s:formal-item s:kind="example">
          <s:formal-item-title>Validation (RefEquality)</s:formal-item-title>
          <s:verbatim><![CDATA[@EqualityReference public final class RefEquality
{

}

public final class RefEqualityTests
{
  @Test public void testEquality()
  {
    Assert.assertEquals(ValidatorResult.VALIDATION_OK, EqualityValidator
      .validateClass(
        RefEquality.class,
        AnnotationRequirement.ANNOTATIONS_REQUIRED,
        true));
  }
}]]></s:verbatim>
        </s:formal-item>
        <s:paragraph>
          The <s:term s:type="type">RefEquality</s:term> class uses the
          <s:link-external s:target="apidocs/com/io7m/jequality/annotations/EqualityReference.html">EqualityReference</s:link-external>
          annotation to indicate that that it implements reference equality.
          The validator checks that this is indeed the case. The following
          test fails:
        </s:paragraph>
        <s:formal-item s:kind="example">
          <s:formal-item-title>Validation (RefEqualityWrong)</s:formal-item-title>
          <s:verbatim><![CDATA[@EqualityReference public final class RefEqualityWrong
{
  @Override public boolean equals(
    final @Nullable Object other)
  {
    return false;
  }

  @Override public int hashCode()
  {
    return 0;
  }
}

public final class RefEqualityTests
{
  @Test public void testReferenceEqualityNot()
  {
    Assert.assertEquals(
      ValidatorResult.VALIDATION_ERROR_WANTED_REFERENCE_EQUALITY,
      EqualityValidator.validateClass(
        RefEqualityWrong.class,
        AnnotationRequirement.ANNOTATIONS_REQUIRED,
        true));
  }
}]]></s:verbatim>
        </s:formal-item>
        <s:paragraph>
          The <s:term s:type="type">RefEqualityWrong</s:term> class claims that
          it implements reference equality, and yet overrides
          <s:term s:type="function">equals</s:term>. The validator will catch
          this and the test will fail.
        </s:paragraph>
        <s:formal-item s:kind="example">
          <s:formal-item-title>Validation (StructuralEquality)</s:formal-item-title>
          <s:verbatim><![CDATA[@EqualityStructural public final class StructuralEquality
{
  @Override public boolean equals(
    final @Nullable Object other)
  {
    return false;
  }

  @Override public int hashCode()
  {
    return 0;
  }
}

public final class RefEqualityTests
{
  @Test public void testStructuralEquality()
  {
    Assert.assertEquals(ValidatorResult.VALIDATION_OK, EqualityValidator
      .validateClass(
        StructuralEquality.class,
        AnnotationRequirement.ANNOTATIONS_REQUIRED,
        true));
  }
}]]></s:verbatim>
        </s:formal-item>
        <s:paragraph>
          The <s:term s:type="type">StructuralEquality</s:term> class claims 
          to implement structural equality and does appear to override
          <s:term s:type="function">equals</s:term> (even though the equality
          relation it defines is not correct). The validator assumes that this
          class is correct.
        </s:paragraph>
      </s:subsection>
    </s:section>
    <s:section>
      <s:section-title>Complaints</s:section-title>
      <s:paragraph>
        Handling of equality in Java is usually considered to be one of the
        worst design mistakes of the language. The problems are manifold. Firstly,
        the <s:term s:type="function">equals</s:term> method is defined on the
        <s:term s:type="type">java.lang.Object</s:term>
        type from which all Java classes are forced to inherit. This means that
        equality <s:term s:type="term">must</s:term> be defined for all types,
        even those that do not have sensible equality relations
        <s:footnote>
          Consider the required equality relation for function types.
        </s:footnote>. If an object forgets to override <s:term s:type="function">equals</s:term>,
        then the object is given reference equality by default.
        Secondly, the argument to the
        <s:term s:type="function">equals</s:term> method is of type
        <s:term s:type="type">java.lang.Object</s:term>, meaning that it's
        perfectly possible to query the equality of values of different types
        (which almost never makes logical sense). Thirdly, the
        <s:term s:type="function">equals</s:term> method must be consistent
        with the associated
        <s:link-external s:target="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#hashCode(java.lang.Object)">hashCode</s:link-external>
        method in order for the standard library collections to behave correctly.
      </s:paragraph>
      <s:paragraph>
        Had Java been designed today, the correct way to design
        <s:term s:type="function">equals</s:term>, assuming that
        <s:term s:type="type">java.lang.Object</s:term> still existed,
        would be for <s:term s:type="type">java.lang.Object</s:term>
        to declare neither <s:term s:type="function">equals</s:term>
        nor <s:term s:type="function">hashCode</s:term>. A static
        method <s:term s:type="function">same</s:term> would be defined
        in <s:term s:type="type">java.lang.Object</s:term> in order
        to compare the addresses of two values. The following interface
        types would be provided by the standard library:
      </s:paragraph>
      <s:formal-item s:kind="example">
        <s:formal-item-title>Interfaces</s:formal-item-title>
        <s:verbatim><![CDATA[public interface Equals<A>
{
  boolean equals(A x);
}

public interface Hashable<A extends Equals<A>>
{
  int hashCode();
}]]></s:verbatim>
      </s:formal-item>
      <s:paragraph>
        Effectively, equality is only defined for objects that
        explicitly implement <s:term s:type="type">Equals</s:term>. The
        <s:term s:type="type">Equals</s:term> type implies structural
        equality.
        Objects can only be placed into collections that require
        hashing if they explicitly implement <s:term s:type="type">Hashable</s:term>
        <s:footnote>
          The constraint on the generic parameter of <s:term s:type="type">Hashable</s:term>
          is intended to imply that all <s:term s:type="type">Hashable</s:term>
          objects also have a defined equality relation. This could arguably
          be removed. 
        </s:footnote>.
        The invariance of generic parameters means that
        comparing objects that are of different types is statically prevented.
      </s:paragraph>
      <s:paragraph>
        This is the approach taken by far safer languages such as 
        <s:link-external s:target="http://haskell.org">Haskell</s:link-external>
        and
        <s:link-external s:target="http://ocaml.org">OCaml</s:link-external>.
        Unfortunately, it is too late to fix these major design flaws in Java.
      </s:paragraph>
    </s:section>
    <s:section>
      <s:section-title>Floating point</s:section-title>
      <s:paragraph>
        The <s:term s:type="package">${project.parent.name}</s:term> package
        implements the floating point comparison functions described in
        <s:link-external s:target="http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition">Comparing floating point numbers, 2012 edition</s:link-external>.
      </s:paragraph>
    </s:section>
  </s:part>

  <s:part>
    <s:part-title>API Reference</s:part-title>
    <s:part-contents/>
    <s:section>
      <s:section-title>Javadoc</s:section-title>
      <s:paragraph>
        API documentation for the package is provided via the
        included <s:link-external s:target="apidocs">Javadoc</s:link-external>.
      </s:paragraph>
    </s:section>
  </s:part>

</s:document>
